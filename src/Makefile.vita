TARGET	:= rottexpr
MAKE	:= make

PROJECT_TITLE := Rise of the Triad
PROJECT_TITLEID := ROTT00001

.PHONY: all clean $(TARGET).vpk param.sfo $(TARGET).elf

# Determine which version to build
# Make sure only one of the following is set to 1 at once
# Triple 0 will build the commercial/registered version

SHAREWARE   ?= 0
SUPERROTT   ?= 0
SITELICENSE ?= 0

CPPFLAGS += -DSHAREWARE=$(SHAREWARE)
CPPFLAGS += -DSUPERROTT=$(SUPERROTT)
CPPFLAGS += -DSITELICENSE=$(SITELICENSE)

ROTT ?= rott

# Regular build flags and rules

CC := arm-vita-eabi-gcc

CFLAGS ?= -std=c17 -Ofast -mcpu=cortex-a9 -mfpu=neon -fgraphite-identity -floop-nest-optimize \
			-fno-builtin-memcpy -fno-builtin-memset -fno-builtin-memmove -fno-builtin-memcmp -Wl,-q -DVITA -I$(VITASDK)/arm-vita-eabi/include/SDL2
CFLAGS +=
CFLAGS += $(EXTRACFLAGS)

CPPFLAGS += -DUSE_SDL=1
CPPFLAGS += -DPLATFORM_UNIX=1
CPPFLAGS += -D_GNU_SOURCE
CPPFLAGS += $(EXTRACPPFLAGS)

LDFLAGS += $(EXTRALDFLAGS)

LDLIBS += -lSDL2_mixer -lFLAC -lmikmod -lmpg123 -lvorbisfile -lvorbis -logg -lSDL2 -lm \
          -lScePower_stub -lSceAudio_stub -lSceCtrl_stub -lSceHid_stub -lSceTouch_stub -lSceDisplay_stub \
          -lSceGxm_stub -lSceAppMgr_stub -lSceSysmodule_stub -lSceCommonDialog_stub -lSceMotion_stub -lSceAppUtil_stub

LDLIBS += $(EXTRALDLIBS)

OBJS :=
OBJS += cin_actr.o
OBJS += cin_efct.o
OBJS += cin_evnt.o
OBJS += cin_glob.o
OBJS += cin_main.o
OBJS += cin_util.o
OBJS += dosutil.o
OBJS += engine.o
OBJS += isr.o
OBJS += modexlib.o
OBJS += rt_actor.o
OBJS += rt_battl.o
OBJS += rt_build.o
OBJS += rt_cfg.o
OBJS += rt_crc.o
OBJS += rt_com.o
OBJS += rt_debug.o
OBJS += rt_dmand.o
OBJS += rt_door.o
OBJS += rt_draw.o
OBJS += rt_floor.o
OBJS += rt_game.o
OBJS += rt_in.o
OBJS += rt_main.o
OBJS += rt_map.o
OBJS += rt_menu.o
OBJS += rt_msg.o
OBJS += rt_net.o
OBJS += rt_playr.o
OBJS += rt_rand.o
OBJS += rt_scale.o
OBJS += rt_sound.o
OBJS += rt_sqrt.o
OBJS += rt_stat.o
OBJS += rt_state.o
OBJS += rt_str.o
OBJS += rt_ted.o
OBJS += rt_util.o
OBJS += rt_view.o
OBJS += rt_vid.o
OBJS += rt_err.o
OBJS += scriplib.o
OBJS += w_wad.o
OBJS += watcom.o
OBJS += z_zone.o
OBJS += byteordr.o
OBJS += dukemusc.o
OBJS += winrott.o
OBJS += queue.o
OBJS += HashTable.o

AUDIOLIB := audiolib/audiolib.a

all: package

package: $(TARGET).vpk

$(TARGET).vpk: eboot.bin param.sfo
	vita-pack-vpk -s param.sfo -b eboot.bin \
		--add shareware.bin=shareware.bin \
		--add ../vita/sce_sys/icon0.png=sce_sys/icon0.png \
		--add ../vita/sce_sys/pic0.png=sce_sys/pic0.png \
		--add ../vita/sce_sys/livearea/contents/bg.png=sce_sys/livearea/contents/bg.png \
		--add ../vita/sce_sys/livearea/contents/startup.png=sce_sys/livearea/contents/startup.png \
		--add ../vita/sce_sys/livearea/contents/template.xml=sce_sys/livearea/contents/template.xml \
	$(TARGET).vpk

eboot.bin: $(TARGET).velf
	vita-make-fself $(TARGET).velf eboot.bin

param.sfo:
	vita-mksfoex -s TITLE_ID="$(PROJECT_TITLEID)" "$(PROJECT_TITLE)" param.sfo

$(TARGET).velf: $(ROTT)
	arm-vita-eabi-strip -g $<
	vita-elf-create $< $@

$(ROTT): $(OBJS) $(AUDIOLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) $^ $(LDLIBS) -o $@

$(OBJS): shareware.bin develop.h

$(AUDIOLIB):
	$(MAKE) -f Makefile.vita -C audiolib

shareware.bin:
	$(MAKE) -f Makefile.vita.shareware
	$(MAKE) -f Makefile.vita.shareware clean

tidy: 
	$(RM) $(OBJS) $(ROTT) $(ROTT).exe

clean: tidy
	$(MAKE) -C audiolib $@
	@rm -rf $(TARGET).velf $(TARGET).elf $(TARGET).vpk eboot.bin shareware.bin param.sfo
